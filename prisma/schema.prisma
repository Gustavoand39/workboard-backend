generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// * ENUMS

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// * MODELS

model User {
  id        String   @id @default(uuid())
  fullName  String   @map("full_name")
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships     ProjectMembership[]
  taskAssignments TaskAssignment[]
  comments        Comment[]

  @@map("users")
}

model Project {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships ProjectMembership[]
  tasks       Task[]

  @@map("projects")
}

model ProjectMembership {
  id        String   @id @default(uuid())
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  role      Role
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId]) // Un usuario no puede tener más de una membresía en un proyecto
  @@index([projectId])
  @@index([userId])
  @@map("project_memberships")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus
  projectId   String     @map("project_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskAssignments TaskAssignment[]
  comments        Comment[]

  @@index([projectId])
  @@map("tasks")
}

model TaskAssignment {
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId]) // Un usuario no puede tener más de una asignación en una tarea
  @@index([taskId])
  @@index([userId])
  @@map("task_assignments")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@map("comments")
}
