generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// * ENUMS

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// * MODELS

model User {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships     ProjectMembership[]
  taskAssignments TaskAssignment[]
  comments        Comment[]
}

model Project {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships ProjectMembership[]
  tasks       Task[]
}

model ProjectMembership {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId]) // Un usuario no puede tener más de una membresía en un proyecto
  @@index([projectId])
  @@index([userId])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus
  projectId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskAssignments TaskAssignment[]
  comments        Comment[]
}

model TaskAssignment {
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId]) // Un usuario no puede tener más de una asignación en una tarea
  @@index([taskId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}
